<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>绿萝间 (Kivy)</title><link>http://muxuezi.github.io/</link><description></description><atom:link href="http://muxuezi.github.io/categories/kivy.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 05 Jun 2015 00:50:45 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>kivy ch7 flappy bird app</title><link>http://muxuezi.github.io/posts/kivy-ch7-flappy-bird-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="飞翔的小鸟app"&gt;飞翔的小鸟app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch7-flappy-bird-app.html#%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9Fapp"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;上一章，通过制作2048app，我们已经掌握了游戏开发的简单技巧。这一章，我们继续游戏开发，做一个同样很受欢迎的游戏，飞翔的小鸟（Flappy Bird），重点学习一下游戏开发中的横向卷轴模式（Side-Scrolling）。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch7-flappy-bird-app.html"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch7-flappy-bird-app.html</guid><pubDate>Fri, 05 Jun 2015 00:47:34 GMT</pubDate></item><item><title>kivy ch6 2048 app</title><link>http://muxuezi.github.io/posts/kivy-ch6-2048-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="2048-app"&gt;2048 app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch6-2048-app.html#2048-app"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;后面的章节，我们将逐步加深难度来介绍Kivy在游戏领域的开发过程，包括状态的管理，角色控制，音效和图象快速渐变的实现等。&lt;/p&gt;
&lt;p&gt;这里提到的内容都是当今游戏开发中不可或缺的，因此有很多软件可以基于同样的算法和性能来实现这些功能，就像视频游戏一样。&lt;/p&gt;
&lt;p&gt;但是，不积跬步，无以至千里。我们要踏出的第一步就是实现老少皆宜的&lt;strong&gt;2048&lt;/strong&gt;游戏。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch6-2048-app.html"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch6-2048-app.html</guid><pubDate>Tue, 02 Jun 2015 10:28:50 GMT</pubDate></item><item><title>kivy ch5 remote desktop app</title><link>http://muxuezi.github.io/posts/kivy-ch5-remote-desktop-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="远程桌面app"&gt;远程桌面app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch5-remote-desktop-app.html#%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2app"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;本章做一个远程桌面app，依然和网络相关。我们用“真正的”应用层协议进行通信，解决一个复杂的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch5-remote-desktop-app.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch5-remote-desktop-app.html</guid><pubDate>Fri, 29 May 2015 07:52:01 GMT</pubDate></item><item><title>kivy ch4 chat app</title><link>http://muxuezi.github.io/posts/kivy-ch4-chat-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Kivy网络编程"&gt;Kivy网络编程&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch4-chat-app.html#Kivy%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;前面我们尝试过单一平台Android的Kivy开发，通过原生的底层API来实现。下面我们探索另外一种天生具有跨平台能力的工具来做app——网络。在这一章，我们做一个聊天app，类似于QQ，但是简单版。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch4-chat-app.html"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch4-chat-app.html</guid><pubDate>Tue, 26 May 2015 08:37:55 GMT</pubDate></item><item><title>kivy ch3 sound recorder for android</title><link>http://muxuezi.github.io/posts/kivy-ch3-sound-recorder-for-android.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Android录音app"&gt;Android录音app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch3-sound-recorder-for-android.html#Android%E5%BD%95%E9%9F%B3app"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;在上一章，我们简要介绍过Kivy要实现跨平台应用，可能在不同的平台需要选择不同的代码，为一些用户增强体验效果，实现具体平台的任务。&lt;/p&gt;
&lt;p&gt;有时，这些都很简单；比如，如果Kivy发现目标系统支持它，多点触控就会启动——不需要写任何代码，但是要考虑一些点击事件原来的功能可能会与多点触控产生冲突。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch3-sound-recorder-for-android.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch3-sound-recorder-for-android.html</guid><pubDate>Sat, 23 May 2015 03:50:15 GMT</pubDate></item><item><title>kivy ch2 paint app</title><link>http://muxuezi.github.io/posts/kivy-ch2-paint-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="画图app"&gt;画图app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch2-paint-app.html#%E7%94%BB%E5%9B%BEapp"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;在第一章做时钟app时，我们用了Kivy的标准部件：布局，文本框和按钮。通过这些高层次的抽象，我们能够灵活的修改部件的外观—，可以使用一整套成熟的组件，而不仅仅是单个原始图形。这种方式并非放之四海而皆准，马上你就会看到，Kivy还提供了低层的抽象工具：画点和线。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch2-paint-app.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch2-paint-app.html</guid><pubDate>Wed, 20 May 2015 05:03:13 GMT</pubDate></item><item><title>kivy ch1 clock app</title><link>http://muxuezi.github.io/posts/kivy-ch1-clock-app.html</link><dc:creator>muxuezi</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="时钟app"&gt;时钟app&lt;a class="anchor-link" href="http://muxuezi.github.io/posts/kivy-ch1-clock-app.html#%E6%97%B6%E9%92%9Fapp"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;一个仿iOS和Android内置时钟应用的app。分两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;个没有交互的数字时钟，简述Kivy的事件驱动(event-driven)方法，引入计时器的功能，持续更新。&lt;/li&gt;
&lt;li&gt;交互的秒表功能，设计流畅的自适应布局。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://muxuezi.github.io/posts/kivy-ch1-clock-app.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>CHS</category><category>ipython</category><category>Kivy</category><category>Python</category><guid>http://muxuezi.github.io/posts/kivy-ch1-clock-app.html</guid><pubDate>Wed, 20 May 2015 05:01:56 GMT</pubDate></item></channel></rss>